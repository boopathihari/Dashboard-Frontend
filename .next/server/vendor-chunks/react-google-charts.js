"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-google-charts";
exports.ids = ["vendor-chunks/react-google-charts"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-google-charts/dist/index.js":
/*!********************************************************!*\
  !*** ./node_modules/react-google-charts/dist/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Chart: () => (/* binding */ Chart),\n/* harmony export */   GoogleDataTableColumnRoleType: () => (/* binding */ GoogleDataTableColumnRoleType),\n/* harmony export */   \"default\": () => (/* binding */ Chart)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n\n\n\n/**\n * Hook to load external script.\n * @param src - Source url to load.\n * @param onLoad - Success callback.\n * @param onError - Error callback.\n */ function useLoadScript(src) {\n    const [isLoading, setIsLoading] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(true);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [isSuccess, setIsSuccess] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const onLoad = ()=>{\n        setIsLoading(false);\n        setIsSuccess(true);\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!document) {\n            const error = new Error(`[ScriptLoadingError] document not defined when attempting to load ${src}`);\n            setError(error);\n            return;\n        }\n        // Find script tag with same src in DOM.\n        const foundScript = document.querySelector(`script[src=\"${src}\"]`);\n        // Call onLoad if script marked as loaded.\n        if (foundScript?.dataset.loaded) {\n            onLoad();\n            return;\n        }\n        // Create or get existed tag.\n        const script = foundScript || document.createElement(\"script\");\n        // Set src if no script was found.\n        if (!foundScript) {\n            script.src = src;\n        }\n        // Mark script as loaded on load event.\n        const onLoadWithMarker = ()=>{\n            script.dataset.loaded = \"1\";\n            onLoad();\n        };\n        script.addEventListener(\"load\", onLoadWithMarker);\n        script.addEventListener(\"error\", (err)=>{\n            console.error(\"Failed to load script:\", src, err);\n            const error = new Error(`[ScriptLoadingError] Failed to load script: ${src}`);\n            setError(error);\n        });\n        // Add to DOM if not yet added.\n        if (!foundScript) {\n            document.head.append(script);\n        }\n    }, []);\n    return {\n        isLoading,\n        error,\n        isSuccess\n    };\n}\n\nconst isGoogleReady = (google)=>{\n    return google && google.charts;\n};\nconst isGoogleChartsReady = (props, google)=>{\n    const { controls, toolbarItems, getChartEditor } = props;\n    return google && google.charts && google.visualization && google.visualization.ChartWrapper && google.visualization.Dashboard && (!controls || google.visualization.ChartWrapper) && (!getChartEditor || google.visualization.ChartEditor) && (!toolbarItems || google.visualization.drawToolbar);\n};\nconst getGoogleInstanceFromWindow = (props)=>{\n    // @ts-expect-error Getting object from global namespace.\n    const google = window.google;\n    return google;\n};\n/**\n * Hook to load Google Charts JS API.\n * @param params - Load parameters.\n * @param [params.chartVersion] - Chart version to load.\n * @param [params.chartPackages] - Packages to load.\n * @param [params.chartLanguage] - Languages to load.\n * @param [params.mapsApiKey] - Google Maps api key.\n * @returns\n */ function useLoadGoogleCharts(props) {\n    const { chartVersion = \"current\", chartPackages = [\n        \"corechart\",\n        \"controls\"\n    ], chartLanguage = \"en\", mapsApiKey } = props;\n    const [googleCharts, setGoogleCharts] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [scriptInitializationError, setScriptInitializationError] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [googleChartsInitializationError, setGoogleChartsInitializationError] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const { isLoading, error: scriptLoadingError, isSuccess } = useLoadScript(props.chartLoaderScriptUrl || \"https://www.gstatic.com/charts/loader.js\");\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!isSuccess) {\n            return;\n        }\n        const google = getGoogleInstanceFromWindow();\n        if (!isGoogleReady(google)) {\n            const error = new Error(\"[ScriptInitializationError] Script loaded but Google not attached to window.\");\n            setScriptInitializationError(error);\n            return;\n        }\n        if (isGoogleChartsReady(props, google)) {\n            setGoogleCharts(google);\n            return;\n        }\n        google.charts.load(chartVersion, {\n            packages: chartPackages,\n            language: chartLanguage,\n            mapsApiKey\n        });\n        google.charts.setOnLoadCallback(()=>{\n            if (!isGoogleChartsReady(props, google)) {\n                const error = new Error(\"[GoogleChartsInitializationError] Google Charts not ready after load callback.\");\n                console.error(error);\n                setGoogleChartsInitializationError(error);\n                return;\n            }\n            setGoogleCharts(google);\n        });\n    }, [\n        isSuccess\n    ]);\n    return {\n        error: scriptLoadingError || scriptInitializationError || googleChartsInitializationError,\n        isLoading,\n        google: googleCharts\n    };\n}\n\nconst chartDefaultProps = {\n    // <DEPRECATED_PROPS>\n    legend_toggle: false,\n    // </DEPRECATED_PROPS>\n    options: {},\n    legendToggle: false,\n    getChartWrapper: ()=>{},\n    spreadSheetQueryParameters: {\n        headers: 1,\n        gid: 1\n    },\n    rootProps: {},\n    chartWrapperParams: {},\n    chartLoaderScriptUrl: \"https://www.gstatic.com/charts/loader.js\"\n};\n\nconst GoogleChartControls = (props)=>{\n    const { isReady, chartControls, filter } = props;\n    if (!isReady || !chartControls || !chartControls?.length) {\n        return null;\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, chartControls.filter((param)=>{\n        let { controlProp, control } = param;\n        return filter ? filter({\n            control,\n            controlProp\n        }) : true;\n    }).map((param)=>{\n        let { control } = param;\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n            key: control.getContainerId(),\n            id: control.getContainerId()\n        });\n    }));\n};\n\nlet uniqueID = 0;\nconst generateUniqueID = ()=>{\n    uniqueID += 1;\n    return `reactgooglegraph-${uniqueID}`;\n};\n\n/**\n * An internal helper class for creating and managing Google Charts controls.\n * Offers high-level methods to interact with the Google Chart Controls.\n */ class GoogleChartControlsInternal {\n    /**\n   * Initialize the controls once chart is ready\n   */ static initializeControls = (googleChartControls)=>{\n        for(let i = 0; i < googleChartControls.length; i += 1){\n            const { controlType, options, controlWrapperParams } = googleChartControls[i].controlProp;\n            if (controlWrapperParams && \"state\" in controlWrapperParams) {\n                googleChartControls[i].control.setState(controlWrapperParams[\"state\"]);\n            }\n            googleChartControls[i].control.setOptions(options);\n            googleChartControls[i].control.setControlType(controlType);\n        }\n    };\n    /**\n   * listen to the control events (ready, statechange, error) specified in the controlEvents prop\n   */ static listenToControlEvents = (googleChartControls, props)=>{\n        const { google } = props;\n        return googleChartControls.flatMap((chartControl)=>{\n            const { control, controlProp } = chartControl;\n            const { controlEvents = [] } = controlProp;\n            return controlEvents.map((event)=>{\n                const { callback, eventName } = event;\n                return google.visualization.events.addListener(control, eventName, function() {\n                    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                        args[_key] = arguments[_key];\n                    }\n                    callback({\n                        chartWrapper: null,\n                        controlWrapper: control,\n                        props: props,\n                        google: google,\n                        eventArgs: args\n                    });\n                });\n            });\n        });\n    };\n    /**\n   * If controlID is not provided, generate a unique controlID\n   */ static createControlId = (id)=>{\n        let controlID;\n        if (typeof id === \"undefined\") {\n            controlID = `googlechart-control-${generateUniqueID()}`;\n        } else {\n            controlID = id;\n        }\n        return controlID;\n    };\n    /**\n   * Map the control props to Google Chart Controls\n   */ static createChartControls = (props)=>{\n        const { controls, google } = props;\n        if (!controls) {\n            return null;\n        }\n        return controls.map((control, i)=>{\n            const { controlID: controlIDMaybe, controlType, options: controlOptions, controlWrapperParams } = control;\n            const controlID = this.createControlId(controlIDMaybe);\n            return {\n                controlProp: control,\n                control: new google.visualization.ControlWrapper({\n                    containerId: controlID,\n                    controlType,\n                    options: controlOptions,\n                    ...controlWrapperParams\n                })\n            };\n        });\n    };\n    static addControls = (props)=>{\n        const { chartWrapper, chartDashboard } = props;\n        const googleChartControls = this.createChartControls(props);\n        if (!googleChartControls || !chartDashboard || !chartWrapper) {\n            return null;\n        }\n        chartDashboard.bind(googleChartControls.map((param)=>{\n            let { control } = param;\n            return control;\n        }), chartWrapper);\n        this.initializeControls(googleChartControls);\n        return googleChartControls;\n    };\n}\n\nconst useCreateChartControls = (controls)=>{\n    const [chartControls, setChartControls] = react__WEBPACK_IMPORTED_MODULE_0__.useState(null);\n    const controlAndProp = react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>{\n        if (!chartControls || !controls) return null;\n        return controls.map((controlProp, i)=>{\n            const control = chartControls[i];\n            return control ? {\n                controlProp,\n                control\n            } : undefined;\n        }).flatMap((controlAndProp)=>controlAndProp ? [\n                controlAndProp\n            ] : []);\n    }, [\n        chartControls,\n        controls\n    ]);\n    return [\n        controlAndProp,\n        setChartControls\n    ];\n};\nconst useListenToControlEvents = (chartControls, props)=>{\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        const listeners = GoogleChartControlsInternal.listenToControlEvents(chartControls ?? [], props);\n        return ()=>{\n            listeners.forEach((listener)=>{\n                props.google.visualization.events.removeListener(listener);\n            });\n        };\n    }, [\n        chartControls,\n        props\n    ]);\n};\nconst useChartControls = (props)=>{\n    const [chartControls, setChartControls] = useCreateChartControls(props.controls);\n    useListenToControlEvents(chartControls ?? [], props);\n    /**\n   * Render the container divs for the controls\n   */ const renderControl = (filter)=>{\n        const { chartWrapper, chartDashboard } = props;\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(GoogleChartControls, {\n            ...props,\n            isReady: Boolean(chartWrapper && chartDashboard),\n            chartControls: chartControls,\n            filter: filter\n        });\n    };\n    return {\n        addControls: (props)=>{\n            const controls = GoogleChartControlsInternal.addControls(props);\n            setChartControls(controls?.map((control)=>control.control) ?? null);\n        },\n        renderControl\n    };\n};\n\nconst useChartId = (props)=>{\n    const chartIdRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    const getChartId = ()=>{\n        const { graphID, graph_id } = props;\n        const chartIdFromProps = graphID || graph_id;\n        let currentChartId;\n        if (chartIdFromProps) {\n            currentChartId = chartIdFromProps;\n        } else {\n            currentChartId = chartIdRef.current || generateUniqueID();\n        }\n        chartIdRef.current = currentChartId;\n        return chartIdRef.current;\n    };\n    const chartId = getChartId();\n    return {\n        chartId\n    };\n};\n\nconst DEFAULT_CHART_COLORS = [\n    \"#3366CC\",\n    \"#DC3912\",\n    \"#FF9900\",\n    \"#109618\",\n    \"#990099\",\n    \"#3B3EAC\",\n    \"#0099C6\",\n    \"#DD4477\",\n    \"#66AA00\",\n    \"#B82E2E\",\n    \"#316395\",\n    \"#994499\",\n    \"#22AA99\",\n    \"#AAAA11\",\n    \"#6633CC\",\n    \"#E67300\",\n    \"#8B0707\",\n    \"#329262\",\n    \"#5574A6\",\n    \"#3B3EAC\"\n];\n\nconst loadDataTableFromSpreadSheet = async function(googleViz, spreadSheetUrl) {\n    let urlParams = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};\n    return new Promise((resolve, reject)=>{\n        const headers = `${urlParams.headers ? `headers=${urlParams.headers}` : `headers=0`}`;\n        const queryString = `${urlParams.query ? `&tq=${encodeURIComponent(urlParams.query)}` : ``}`;\n        const gid = `${urlParams.gid ? `&gid=${urlParams.gid}` : \"\"}`;\n        const sheet = `${urlParams.sheet ? `&sheet=${urlParams.sheet}` : \"\"}`;\n        const access_token = `${urlParams.access_token ? `&access_token=${urlParams.access_token}` : \"\"}`;\n        const urlQueryString = `${headers}${gid}${sheet}${queryString}${access_token}`;\n        const urlToSpreadSheet = `${spreadSheetUrl}/gviz/tq?${urlQueryString}`; //&tq=${queryString}`;\n        const query = new googleViz.visualization.Query(urlToSpreadSheet);\n        query.send((response)=>{\n            if (response.isError()) {\n                reject(`Error in query:  ${response.getMessage()} ${response.getDetailedMessage()}`);\n            } else {\n                resolve(response.getDataTable());\n            }\n        });\n    });\n};\n\nconst GRAY_COLOR = \"#CCCCCC\";\n/**\n * An internal helper class around the Google Chart API.\n * Offers high-level methods to interact with the Google Chart API.\n */ class GoogleChartInternal {\n    static grayOutHiddenColumnsLabel = (props, hiddenColumns)=>{\n        const { googleChartWrapper, options } = props;\n        if (!googleChartWrapper) {\n            console.error(\"googleChartWrapper is not defined\");\n            return;\n        }\n        const dataTable = googleChartWrapper.getDataTable();\n        if (!dataTable) return;\n        const columnCount = dataTable.getNumberOfColumns();\n        const hasAHiddenColumn = hiddenColumns.length > 0;\n        if (hasAHiddenColumn === false) return;\n        const colors = Array.from({\n            length: columnCount - 1\n        }).map((_dontcare, i)=>{\n            const columnID = this.getColumnId(dataTable, i + 1);\n            if (hiddenColumns.includes(columnID)) {\n                return GRAY_COLOR;\n            } else if (options && options.colors) {\n                return options.colors[i];\n            } else {\n                return DEFAULT_CHART_COLORS[i];\n            }\n        });\n        googleChartWrapper.setOptions({\n            ...options,\n            colors\n        });\n        googleChartWrapper.draw();\n    };\n    /**\n   * Listens to user clicking on the legend to toggle the visibility of a column.\n   * When a user clicks on a legend item, the column id is added to / removed from the hiddenColumns state.\n   */ static listenToLegendToggle = (props, hiddenColumnsState)=>{\n        const [hiddenColumns, setHiddenColumns] = hiddenColumnsState;\n        const { google, googleChartWrapper } = props;\n        if (!googleChartWrapper) {\n            console.error(\"googleChartWrapper is not defined\");\n            return;\n        }\n        return google.visualization.events.addListener(googleChartWrapper, \"select\", ()=>{\n            const chart = googleChartWrapper.getChart();\n            const selection = chart.getSelection();\n            const dataTable = googleChartWrapper.getDataTable();\n            if (selection.length === 0 || // We want to listen to when a whole row is selected. This is the case only when row === null\n            selection[0].row !== null || !dataTable) {\n                return;\n            }\n            const columnIndex = selection[0].column;\n            const columnID = this.getColumnId(dataTable, columnIndex);\n            // If the column is hidden remove it from state, otherwise add it\n            if (hiddenColumns?.includes(columnID)) {\n                setHiddenColumns((state)=>[\n                        ...state.filter((colID)=>colID !== columnID)\n                    ]);\n            } else {\n                setHiddenColumns((state)=>[\n                        ...state,\n                        columnID\n                    ]);\n            }\n        });\n    };\n    /**\n   * (Re-)Draw a Google Chart with the given data, options, and chart type.\n   */ static draw = async (props)=>{\n        const { data, diffdata, rows, columns, options, chartType, formatters, spreadSheetUrl, spreadSheetQueryParameters, googleChartDashboard, googleChartWrapper, google, hiddenColumns, legendToggle, legend_toggle } = props;\n        if (!googleChartWrapper) {\n            console.error(\"draw was called with googleChartWrapper = null\");\n            return;\n        }\n        let dataTable;\n        let chartDiff = null;\n        if (diffdata) {\n            const oldData = google.visualization.arrayToDataTable(diffdata.old);\n            const newData = google.visualization.arrayToDataTable(diffdata.new);\n            chartDiff = google.visualization[chartType].prototype.computeDiff(oldData, newData);\n        }\n        if (data) {\n            if (Array.isArray(data)) {\n                dataTable = google.visualization.arrayToDataTable(data);\n            } else {\n                dataTable = new google.visualization.DataTable(data);\n            }\n        } else if (rows && columns) {\n            dataTable = google.visualization.arrayToDataTable([\n                columns,\n                ...rows\n            ]);\n        } else if (spreadSheetUrl) {\n            dataTable = await loadDataTableFromSpreadSheet(google, spreadSheetUrl, spreadSheetQueryParameters);\n        } else {\n            dataTable = google.visualization.arrayToDataTable([]);\n        }\n        const columnCount = dataTable.getNumberOfColumns();\n        const viewColumns = Array(columnCount).fill(0).map((_c, i)=>{\n            const columnID = this.getColumnId(dataTable, i);\n            if (hiddenColumns.includes(columnID)) {\n                return {\n                    label: dataTable.getColumnLabel(i),\n                    type: dataTable.getColumnType(i),\n                    calc: ()=>null\n                };\n            } else {\n                return i;\n            }\n        });\n        const chart = googleChartWrapper.getChart();\n        if (googleChartWrapper.getChartType() === \"Timeline\") {\n            chart && chart.clearChart();\n        }\n        googleChartWrapper.setChartType(chartType);\n        googleChartWrapper.setOptions(options || {});\n        const viewTable = new google.visualization.DataView(dataTable);\n        viewTable.setColumns(viewColumns);\n        googleChartWrapper.setDataTable(viewTable);\n        googleChartWrapper.draw();\n        if (googleChartDashboard) {\n            googleChartDashboard.draw(dataTable);\n        }\n        if (chartDiff) {\n            googleChartWrapper.setDataTable(chartDiff);\n            googleChartWrapper.draw();\n        }\n        if (formatters) {\n            this.applyFormatters({\n                dataTable,\n                formatters,\n                google\n            });\n            googleChartWrapper.setDataTable(dataTable);\n            googleChartWrapper.draw();\n        }\n        if (legendToggle === true || legend_toggle === true) {\n            this.grayOutHiddenColumnsLabel(props, hiddenColumns);\n        }\n        return;\n    };\n    /**\n   * Get the column ID of a column in a GoogleDataTable.\n   * If the column has an ID, return the ID, otherwise return the label.\n   */ static getColumnId = (dataTable, columnIndex)=>{\n        return dataTable.getColumnId(columnIndex) || dataTable.getColumnLabel(columnIndex);\n    };\n    /**\n   * Apply Chart Formatters passed under the formatters prop to the GoogleDataTable\n   */ static applyFormatters = (param)=>{\n        let { dataTable, formatters, google } = param;\n        for (let formatter of formatters){\n            switch(formatter.type){\n                case \"ArrowFormat\":\n                    {\n                        const vizFormatter = new google.visualization.ArrowFormat(formatter.options);\n                        vizFormatter.format(dataTable, formatter.column);\n                        return;\n                    }\n                case \"BarFormat\":\n                    {\n                        const vizFormatter = new google.visualization.BarFormat(formatter.options);\n                        vizFormatter.format(dataTable, formatter.column);\n                        return;\n                    }\n                case \"ColorFormat\":\n                    {\n                        const vizFormatter = new google.visualization.ColorFormat(formatter.options);\n                        const { ranges } = formatter;\n                        if (ranges) {\n                            for (let range of ranges){\n                                vizFormatter.addRange(...range);\n                            }\n                        }\n                        vizFormatter.format(dataTable, formatter.column);\n                        return;\n                    }\n                case \"DateFormat\":\n                    {\n                        const vizFormatter = new google.visualization.DateFormat(formatter.options);\n                        vizFormatter.format(dataTable, formatter.column);\n                        return;\n                    }\n                case \"NumberFormat\":\n                    {\n                        const vizFormatter = new google.visualization.NumberFormat(formatter.options);\n                        vizFormatter.format(dataTable, formatter.column);\n                        return;\n                    }\n                case \"PatternFormat\":\n                    {\n                        const vizFormatter = new google.visualization.PatternFormat(formatter.options);\n                        vizFormatter.format(dataTable, formatter.column);\n                        return;\n                    }\n                default:\n                    {\n                        console.warn(`Unknown formatter type: ${formatter.type}`);\n                        return;\n                    }\n            }\n        }\n    };\n}\n\nconst useGoogleChartDataTable = (props)=>{\n    const { google, googleChartWrapper, googleChartDashboard } = props;\n    const [hiddenColumns, setHiddenColumns] = react__WEBPACK_IMPORTED_MODULE_0__.useState([]);\n    // Re-draw the chart when hiddenColumns change\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (!googleChartWrapper) {\n            return;\n        }\n        GoogleChartInternal.draw({\n            ...props,\n            hiddenColumns,\n            googleChartWrapper,\n            googleChartDashboard,\n            google\n        });\n    }, [\n        hiddenColumns,\n        props.data,\n        props.rows,\n        props.columns,\n        props.options,\n        props.chartLoaderScriptUrl,\n        props.chartType,\n        props.formatters,\n        props.spreadSheetUrl,\n        props.spreadSheetQueryParameters,\n        props.legendToggle,\n        props.legend_toggle\n    ]);\n    // Re-draw the chart when the window is resized\n    const onResize = ()=>{\n        const { googleChartWrapper } = props;\n        if (!googleChartWrapper) {\n            return;\n        }\n        googleChartWrapper.draw();\n    };\n    // Draw the chart when the google charts wrapper is ready and when the hiddenColumns change\n    const initialize = (googleChartWrapper)=>{\n        const listeners = [];\n        const { legendToggle, legend_toggle } = props;\n        GoogleChartInternal.draw({\n            ...props,\n            hiddenColumns,\n            googleChartWrapper,\n            googleChartDashboard,\n            google\n        });\n        window.addEventListener(\"resize\", onResize);\n        if (legend_toggle || legendToggle) {\n            const listener = GoogleChartInternal.listenToLegendToggle(props, [\n                hiddenColumns,\n                setHiddenColumns\n            ]);\n            if (listener) listeners.push(listener);\n        }\n        return listeners;\n    };\n    // Remove event listeners and clear the chart when the component is unmounted\n    const destroy = (googleChartWrapper, listeners)=>{\n        window.removeEventListener(\"resize\", onResize);\n        listeners.forEach((listener)=>{\n            google.visualization.events.removeListener(listener);\n        });\n        if (googleChartWrapper.getChartType() === \"Timeline\") {\n            googleChartWrapper.getChart() && googleChartWrapper.getChart().clearChart();\n        }\n    };\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        if (!googleChartWrapper) {\n            return;\n        }\n        const listeners = initialize(googleChartWrapper);\n        return ()=>{\n            destroy(googleChartWrapper, listeners);\n        };\n    }, [\n        googleChartWrapper,\n        initialize,\n        destroy\n    ]);\n};\n\nconst listenToEvents = (props)=>{\n    const { chartEvents, google, googleChartWrapper } = props;\n    if (!chartEvents) {\n        return;\n    }\n    if (!googleChartWrapper) {\n        console.warn(\"listenToEvents was called before chart wrapper ready.\");\n        return;\n    }\n    return chartEvents.map((param)=>{\n        let { eventName, callback } = param;\n        return google.visualization.events.addListener(googleChartWrapper, eventName, function() {\n            for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n                args[_key] = arguments[_key];\n            }\n            callback({\n                chartWrapper: googleChartWrapper,\n                props,\n                google: google,\n                eventArgs: args\n            });\n        });\n    });\n};\nconst useGoogleChartEvents = (props)=>{\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!props.googleChartWrapper) return;\n        const listeners = listenToEvents(props);\n        return ()=>{\n            listeners?.forEach((listener)=>{\n                props.google.visualization.events.removeListener(listener);\n            });\n        };\n    }, [\n        props\n    ]);\n};\n\nconst GoogleChart = (props)=>{\n    const [googleChartWrapper, setGoogleChartWrapper] = react__WEBPACK_IMPORTED_MODULE_0__.useState(null);\n    // const [isReady, setIsReady] = React.useState<boolean>(false);\n    const [googleChartDashboard, setGoogleChartDashboard] = react__WEBPACK_IMPORTED_MODULE_0__.useState(null);\n    const { addControls, renderControl } = useChartControls({\n        ...props,\n        chartDashboard: googleChartDashboard,\n        chartWrapper: googleChartWrapper\n    });\n    useGoogleChartEvents({\n        ...props,\n        googleChartWrapper\n    });\n    const { chartId } = useChartId(props);\n    const dashboardRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    const toolbarRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        const { options, google, chartType, chartWrapperParams, toolbarItems, getChartEditor, getChartWrapper, onLoad } = props;\n        const chartConfig = {\n            chartType,\n            options,\n            containerId: chartId,\n            ...chartWrapperParams\n        };\n        // Create ChartWrapper instance, pass it to the user and store it in state\n        const chartWrapper = new google.visualization.ChartWrapper(chartConfig);\n        chartWrapper.setOptions(options || {});\n        getChartWrapper?.(chartWrapper, google);\n        // Create Dashboard instance, needed for controls\n        const chartDashboard = new google.visualization.Dashboard(dashboardRef.current);\n        // Create toolbar if needed\n        if (toolbarItems) {\n            google.visualization.drawToolbar(toolbarRef.current, toolbarItems);\n        }\n        // Create ChartEditor instance if needed and pass it to the user\n        let chartEditor = null;\n        if (getChartEditor) {\n            chartEditor = new google.visualization.ChartEditor();\n            getChartEditor({\n                chartEditor,\n                chartWrapper,\n                google\n            });\n        }\n        // Create and add controls to the chart / dashboard\n        addControls({\n            ...props,\n            chartDashboard,\n            chartWrapper\n        });\n        setGoogleChartWrapper(chartWrapper);\n        setGoogleChartDashboard(chartDashboard);\n        onLoad?.(google, {\n            google,\n            chartWrapper,\n            chartEditor,\n            chartDashboard\n        });\n    }, []);\n    useGoogleChartDataTable({\n        ...props,\n        googleChartWrapper,\n        googleChartDashboard\n    });\n    const renderChart = ()=>{\n        const { width, height, options, style, className, rootProps, google } = props;\n        const divStyle = {\n            height: height || options && options.height,\n            width: width || options && options.width,\n            ...style\n        };\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n            id: chartId,\n            style: divStyle,\n            className: className,\n            ...rootProps\n        });\n    };\n    const renderToolBar = ()=>{\n        if (!props.toolbarItems) return null;\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n            ref: toolbarRef\n        });\n    };\n    const { width, height, options, style } = props;\n    const divStyle = {\n        height: height || options && options.height,\n        width: width || options && options.width,\n        ...style\n    };\n    // If render prop is provided, give the user full control over the rendering by passing renderChart, renderControl and renderToolbar functions\n    if (props.render) {\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n            ref: dashboardRef,\n            style: divStyle\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n            ref: toolbarRef,\n            id: \"toolbar\"\n        }), props.render({\n            renderChart,\n            renderControl,\n            renderToolbar: renderToolBar\n        }));\n    } else {\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n            ref: dashboardRef,\n            style: divStyle\n        }, renderControl((param)=>{\n            let { controlProp } = param;\n            return controlProp.controlPosition !== \"bottom\";\n        }), renderChart(), renderControl((param)=>{\n            let { controlProp } = param;\n            return controlProp.controlPosition === \"bottom\";\n        }), renderToolBar());\n    }\n};\n\nconst ChartContext = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext(chartDefaultProps);\nconst ContextProvider = (param)=>{\n    let { children, value } = param;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ChartContext.Provider, {\n        value: value\n    }, children);\n};\n\n/**\n * Loads Google Charts JS and renders the GoogleChart component.\n */ const ChartView = (props)=>{\n    const { google, isLoading, error } = useLoadGoogleCharts(props);\n    if (isLoading) {\n        return props.loader ?? null;\n    }\n    if (error) {\n        return props.errorElement ?? null;\n    }\n    if (google) {\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(GoogleChart, {\n            google: google,\n            ...props\n        });\n    }\n    return null;\n};\n/**\n * Updates the context with the props and renders ChartView.\n */ const Chart = (userProps)=>{\n    const props = {\n        ...chartDefaultProps,\n        ...userProps\n    };\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ContextProvider, {\n        value: props\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ChartView, props));\n};\n\n// Complete Google Charts Type Definition : https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/google.visualization/index.d.ts\nvar GoogleDataTableColumnRoleType;\n(function(GoogleDataTableColumnRoleType) {\n    GoogleDataTableColumnRoleType[\"annotation\"] = \"annotation\";\n    GoogleDataTableColumnRoleType[\"annotationText\"] = \"annotationText\";\n    GoogleDataTableColumnRoleType[\"certainty\"] = \"certainty\";\n    GoogleDataTableColumnRoleType[\"emphasis\"] = \"emphasis\";\n    GoogleDataTableColumnRoleType[\"interval\"] = \"interval\";\n    GoogleDataTableColumnRoleType[\"scope\"] = \"scope\";\n    GoogleDataTableColumnRoleType[\"style\"] = \"style\";\n    GoogleDataTableColumnRoleType[\"tooltip\"] = \"tooltip\";\n    GoogleDataTableColumnRoleType[\"domain\"] = \"domain\";\n})(GoogleDataTableColumnRoleType || (GoogleDataTableColumnRoleType = {}));\n\n\n//# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-google-charts/dist/index.js\n");

/***/ })

};
;